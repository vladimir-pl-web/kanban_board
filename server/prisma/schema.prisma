// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  workInterval    Int?              @default(50) @map("work_interval")
  breakInterval   Int?              @default(10) @map("break_interval")
  intervalCount   Int?              @default(7) @map("interval_count")
  tasks           Task[]
  timeBlocks      TimeBlock[]
  pomodoroSession PomodoroSession[]

  @@map("user")
}

enum Priority {
  low
  medium
  high
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String?
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAT DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  user          User            @relation(fields: [userId], references: [id])
  userId        String          @map("user_id")
  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updetedAT DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")
  totalSeconds Int @map("total_seconds")

  pomodoroSession PomodoroSession @relation(fields: [sessionId], references: [id], onDelete:Cascade)
  sessionId       String         @map("session_id")

  @@map("pomodoro_round")
}
